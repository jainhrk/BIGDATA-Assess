# -*- coding: utf-8 -*-
"""Final-Bigdataset-EDA-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jIQkDqVbZnGko7Rd8zIw-uTvZtyvTZsd
"""

import csv
import datetime

with open('Book1.csv', 'r') as input_file, open('output.csv', 'w', newline='') as output_file:
    reader = csv.reader(input_file)
    writer = csv.writer(output_file)
    headers = next(reader)  # skip the first row (header row)
    writer.writerow(['Weekday', 'Month'])  # write the headers to the output file
    for row in reader:
        date_str = row[0]
        if date_str == '':  # skip empty rows
            continue
        date_obj = datetime.datetime.strptime(date_str, '%d-%m-%Y')
        weekday = date_obj.strftime('%A')
        month = date_obj.strftime('%B')
        writer.writerow([weekday, month])

import csv
from datetime import datetime

# Function to convert time to day/evening/night
def get_time_period(time_str):
    time_obj = datetime.strptime(time_str, '%H:%M')
    if time_obj.hour >= 6 and time_obj.hour < 18:
        return 'day'
    elif time_obj.hour >= 18 and time_obj.hour < 22:
        return 'evening'
    else:
        return 'night'

# Read CSV file
with open('Book1.csv', 'r') as csv_file:
    csv_reader = csv.reader(csv_file)
    header = next(csv_reader) # Skip header row
    data = [row for row in csv_reader]

# Convert time to day/evening/night
for row in data:
    row[1] = get_time_period(row[1])

# Write output to CSV file
with open('outtime.csv', 'w', newline='') as csv_file:
    csv_writer = csv.writer(csv_file)
    csv_writer.writerow(header)
    csv_writer.writerows(data)

import csv
from datetime import datetime

# Function to convert time to day/evening/night
def get_time_period(time_str):
    time_obj = datetime.strptime(time_str, '%H:%M')
    if time_obj.hour >= 6 and time_obj.hour < 18:
        return 'day'
    elif time_obj.hour >= 18 and time_obj.hour < 22:
        return 'evening'
    else:
        return 'night'

# Read CSV file
with open('usersess.csv', 'r') as input_file, open('usersessdatetime.csv', 'w', newline='') as output_file:
    reader = csv.reader(input_file)
    writer = csv.writer(output_file)
    headers = next(reader)  # skip the first row (header row)
    writer.writerow(['Weekday', 'Month', 'Time Period'])  # write the headers to the output file
    for row in reader:
        date_str = row[0]
        time_str = row[1]
        if date_str == '' or time_str == '':  # skip empty rows
            continue
        date_obj = datetime.strptime(date_str, '%d-%m-%Y')
        weekday = date_obj.strftime('%A')
        month = date_obj.strftime('%B')
        time_period = get_time_period(time_str)
        writer.writerow([weekday, month, time_period])

#date of birth
import csv
from datetime import datetime

# Function to calculate the age based on the DOB
def calculate_age(dob):
    today = datetime.today()
    age = today.year - dob.year
    if today.month < dob.month or (today.month == dob.month and today.day < dob.day):
        age -= 1
    return age

with open('age.csv', 'r') as input_file, open('ageo.csv', 'w', newline='') as output_file:
    reader = csv.reader(input_file)
    writer = csv.writer(output_file)
    headers = next(reader)  # skip the first row (header row)
    writer.writerow(['DOB', 'Year', 'Age'])  # write the headers to the output file
    for row in reader:
        dob_str = row[0]
        if dob_str == '':  # skip empty rows
            continue
        dob = datetime.strptime(dob_str, '%d-%m-%Y')
        year = dob.year
        age = calculate_age(dob)
        writer.writerow([dob_str, year, age])

import csv

# Function to calculate the year group
def calculate_year_group(year):
    return ((year - 1) // 8) * 8 + 1

with open('ageo.csv', 'r') as input_file, open('yearo.csv', 'w', newline='') as output_file:
    reader = csv.reader(input_file)
    writer = csv.writer(output_file)
    headers = next(reader)  # skip the first row (header row)
    writer.writerow(['Year', 'Year Group'])  # write the headers to the output file
    for row in reader:
        year_str = row[0]
        if year_str == '':  # skip empty rows
            continue
        year = int(year_str)
        year_group = calculate_year_group(year)
        writer.writerow([year, year_group])

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Read the dataset into a pandas DataFrame
data = pd.read_csv('level-events.csv')

# Convert timestamp column to datetime type
data['timestamp'] = pd.to_datetime(data['timestamp'])

# Set the background color to black
#plt.style.use('dark_background')

# Time Series Analysis
plt.figure(figsize=(12, 6))
sns.lineplot(data=data, x='timestamp', y='teamLevel', color='white')  # Set line color to white for better visibility
plt.xlabel('Time-stamp') 
plt.ylabel('Team-Level')
plt.title('Team-Level Progression with Time')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Read the dataset into a pandas DataFrame
data = pd.read_csv('level-events.csv')

# Convert timestamp column to datetime type
data['timestamp'] = pd.to_datetime(data['timestamp'])

# Team Level Distribution
plt.figure(figsize=(8, 6))
ax = sns.histplot(data=data, x='teamLevel', bins=range(1, 4), discrete=True, color='pink')  # Specify color here
plt.xlabel('Team-Level')
plt.ylabel('Team-Id-Count')
plt.title('Team-Levels-organization')

# Add values on top of each bar
for p in ax.patches:
    ax.annotate(f'{p.get_height()}', (p.get_x() + p.get_width() / 2., p.get_height()), ha='center', va='center', xytext=(0, 5), textcoords='offset points')

plt.show()